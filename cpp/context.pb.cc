// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: context.proto

#include "context.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace piscan_pb {
class ScannerContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScannerContext> _instance;
} _ScannerContext_default_instance_;
class DemodContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemodContext> _instance;
} _DemodContext_default_instance_;
class GeneralMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralMessage> _instance;
} _GeneralMessage_default_instance_;
}  // namespace piscan_pb
static void InitDefaultsScannerContext_context_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::piscan_pb::_ScannerContext_default_instance_;
    new (ptr) ::piscan_pb::ScannerContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::piscan_pb::ScannerContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScannerContext_context_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScannerContext_context_2eproto}, {}};

static void InitDefaultsDemodContext_context_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::piscan_pb::_DemodContext_default_instance_;
    new (ptr) ::piscan_pb::DemodContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::piscan_pb::DemodContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemodContext_context_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDemodContext_context_2eproto}, {}};

static void InitDefaultsGeneralMessage_context_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::piscan_pb::_GeneralMessage_default_instance_;
    new (ptr) ::piscan_pb::GeneralMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::piscan_pb::GeneralMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralMessage_context_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGeneralMessage_context_2eproto}, {}};

void InitDefaults_context_2eproto() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScannerContext_context_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemodContext_context_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralMessage_context_2eproto.base);
}

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_context_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_context_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_context_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_context_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, state_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, freq_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, systemtag_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, entrytag_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, modulation_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::ScannerContext, entryindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::piscan_pb::DemodContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::piscan_pb::DemodContext, squelch_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::DemodContext, gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::piscan_pb::GeneralMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::piscan_pb::GeneralMessage, type_),
  PROTOBUF_FIELD_OFFSET(::piscan_pb::GeneralMessage, content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::piscan_pb::ScannerContext)},
  { 11, -1, sizeof(::piscan_pb::DemodContext)},
  { 18, -1, sizeof(::piscan_pb::GeneralMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::piscan_pb::_ScannerContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::piscan_pb::_DemodContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::piscan_pb::_GeneralMessage_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_context_2eproto = {
  {}, AddDescriptors_context_2eproto, "context.proto", schemas,
  file_default_instances, TableStruct_context_2eproto::offsets,
  file_level_metadata_context_2eproto, 3, file_level_enum_descriptors_context_2eproto, file_level_service_descriptors_context_2eproto,
};

const char descriptor_table_protodef_context_2eproto[] =
  "\n\rcontext.proto\022\tpiscan_pb\"\320\001\n\016ScannerCo"
  "ntext\022.\n\005state\030\001 \001(\0162\037.piscan_pb.Scanner"
  "Context.State\022\014\n\004freq\030\002 \001(\004\022\021\n\tsystemTag"
  "\030\003 \001(\t\022\020\n\010entryTag\030\004 \001(\t\022\022\n\nmodulation\030\005"
  " \001(\t\022\022\n\nentryIndex\030\006 \001(\t\"3\n\005State\022\t\n\005INV"
  "AL\020\000\022\010\n\004SCAN\020\001\022\010\n\004HOLD\020\002\022\013\n\007RECEIVE\020\003\"-\n"
  "\014DemodContext\022\017\n\007squelch\030\001 \001(\005\022\014\n\004gain\030\002"
  " \001(\002\"y\n\016GeneralMessage\022,\n\004type\030\001 \001(\0162\036.p"
  "iscan_pb.GeneralMessage.Type\022\017\n\007content\030"
  "\002 \001(\t\"(\n\004Type\022\010\n\004INFO\020\000\022\013\n\007WARNING\020\001\022\t\n\005"
  "ERROR\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_context_2eproto = {
  false, InitDefaults_context_2eproto, 
  descriptor_table_protodef_context_2eproto,
  "context.proto", &assign_descriptors_table_context_2eproto, 415,
};

void AddDescriptors_context_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_context_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_context_2eproto = []() { AddDescriptors_context_2eproto(); return true; }();
namespace piscan_pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScannerContext_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_context_2eproto);
  return file_level_enum_descriptors_context_2eproto[0];
}
bool ScannerContext_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScannerContext_State ScannerContext::INVAL;
constexpr ScannerContext_State ScannerContext::SCAN;
constexpr ScannerContext_State ScannerContext::HOLD;
constexpr ScannerContext_State ScannerContext::RECEIVE;
constexpr ScannerContext_State ScannerContext::State_MIN;
constexpr ScannerContext_State ScannerContext::State_MAX;
constexpr int ScannerContext::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeneralMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_context_2eproto);
  return file_level_enum_descriptors_context_2eproto[1];
}
bool GeneralMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GeneralMessage_Type GeneralMessage::INFO;
constexpr GeneralMessage_Type GeneralMessage::WARNING;
constexpr GeneralMessage_Type GeneralMessage::ERROR;
constexpr GeneralMessage_Type GeneralMessage::Type_MIN;
constexpr GeneralMessage_Type GeneralMessage::Type_MAX;
constexpr int GeneralMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ScannerContext::InitAsDefaultInstance() {
}
class ScannerContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScannerContext::kStateFieldNumber;
const int ScannerContext::kFreqFieldNumber;
const int ScannerContext::kSystemTagFieldNumber;
const int ScannerContext::kEntryTagFieldNumber;
const int ScannerContext::kModulationFieldNumber;
const int ScannerContext::kEntryIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScannerContext::ScannerContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:piscan_pb.ScannerContext)
}
ScannerContext::ScannerContext(const ScannerContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  systemtag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.systemtag().size() > 0) {
    systemtag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.systemtag_);
  }
  entrytag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.entrytag().size() > 0) {
    entrytag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entrytag_);
  }
  modulation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.modulation().size() > 0) {
    modulation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modulation_);
  }
  entryindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.entryindex().size() > 0) {
    entryindex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryindex_);
  }
  ::memcpy(&freq_, &from.freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&freq_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:piscan_pb.ScannerContext)
}

void ScannerContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ScannerContext_context_2eproto.base);
  systemtag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entrytag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryindex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&freq_)) + sizeof(state_));
}

ScannerContext::~ScannerContext() {
  // @@protoc_insertion_point(destructor:piscan_pb.ScannerContext)
  SharedDtor();
}

void ScannerContext::SharedDtor() {
  systemtag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entrytag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryindex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScannerContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScannerContext& ScannerContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScannerContext_context_2eproto.base);
  return *internal_default_instance();
}


void ScannerContext::Clear() {
// @@protoc_insertion_point(message_clear_start:piscan_pb.ScannerContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  systemtag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entrytag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entryindex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&freq_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScannerContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .piscan_pb.ScannerContext.State state = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        set_state(static_cast<::piscan_pb::ScannerContext_State>(val));
        break;
      }
      // uint64 freq = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        set_freq(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string systemTag = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_systemtag(), ptr, ctx, "piscan_pb.ScannerContext.systemTag");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string entryTag = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entrytag(), ptr, ctx, "piscan_pb.ScannerContext.entryTag");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string modulation = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_modulation(), ptr, ctx, "piscan_pb.ScannerContext.modulation");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string entryIndex = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entryindex(), ptr, ctx, "piscan_pb.ScannerContext.entryIndex");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScannerContext::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:piscan_pb.ScannerContext)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .piscan_pb.ScannerContext.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::piscan_pb::ScannerContext_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 freq = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string systemTag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_systemtag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->systemtag().data(), static_cast<int>(this->systemtag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "piscan_pb.ScannerContext.systemTag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entryTag = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entrytag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entrytag().data(), static_cast<int>(this->entrytag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "piscan_pb.ScannerContext.entryTag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modulation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_modulation()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->modulation().data(), static_cast<int>(this->modulation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "piscan_pb.ScannerContext.modulation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string entryIndex = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entryindex()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entryindex().data(), static_cast<int>(this->entryindex().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "piscan_pb.ScannerContext.entryIndex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:piscan_pb.ScannerContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:piscan_pb.ScannerContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScannerContext::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:piscan_pb.ScannerContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .piscan_pb.ScannerContext.State state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint64 freq = 2;
  if (this->freq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->freq(), output);
  }

  // string systemTag = 3;
  if (this->systemtag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->systemtag().data(), static_cast<int>(this->systemtag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.systemTag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->systemtag(), output);
  }

  // string entryTag = 4;
  if (this->entrytag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entrytag().data(), static_cast<int>(this->entrytag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.entryTag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->entrytag(), output);
  }

  // string modulation = 5;
  if (this->modulation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->modulation().data(), static_cast<int>(this->modulation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.modulation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modulation(), output);
  }

  // string entryIndex = 6;
  if (this->entryindex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entryindex().data(), static_cast<int>(this->entryindex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.entryIndex");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->entryindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:piscan_pb.ScannerContext)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScannerContext::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:piscan_pb.ScannerContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .piscan_pb.ScannerContext.State state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // uint64 freq = 2;
  if (this->freq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->freq(), target);
  }

  // string systemTag = 3;
  if (this->systemtag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->systemtag().data(), static_cast<int>(this->systemtag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.systemTag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->systemtag(), target);
  }

  // string entryTag = 4;
  if (this->entrytag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entrytag().data(), static_cast<int>(this->entrytag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.entryTag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->entrytag(), target);
  }

  // string modulation = 5;
  if (this->modulation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->modulation().data(), static_cast<int>(this->modulation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.modulation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->modulation(), target);
  }

  // string entryIndex = 6;
  if (this->entryindex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entryindex().data(), static_cast<int>(this->entryindex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.ScannerContext.entryIndex");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->entryindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:piscan_pb.ScannerContext)
  return target;
}

size_t ScannerContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:piscan_pb.ScannerContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string systemTag = 3;
  if (this->systemtag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->systemtag());
  }

  // string entryTag = 4;
  if (this->entrytag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entrytag());
  }

  // string modulation = 5;
  if (this->modulation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->modulation());
  }

  // string entryIndex = 6;
  if (this->entryindex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entryindex());
  }

  // uint64 freq = 2;
  if (this->freq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->freq());
  }

  // .piscan_pb.ScannerContext.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScannerContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:piscan_pb.ScannerContext)
  GOOGLE_DCHECK_NE(&from, this);
  const ScannerContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScannerContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:piscan_pb.ScannerContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:piscan_pb.ScannerContext)
    MergeFrom(*source);
  }
}

void ScannerContext::MergeFrom(const ScannerContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:piscan_pb.ScannerContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.systemtag().size() > 0) {

    systemtag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.systemtag_);
  }
  if (from.entrytag().size() > 0) {

    entrytag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entrytag_);
  }
  if (from.modulation().size() > 0) {

    modulation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modulation_);
  }
  if (from.entryindex().size() > 0) {

    entryindex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entryindex_);
  }
  if (from.freq() != 0) {
    set_freq(from.freq());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ScannerContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:piscan_pb.ScannerContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScannerContext::CopyFrom(const ScannerContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:piscan_pb.ScannerContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScannerContext::IsInitialized() const {
  return true;
}

void ScannerContext::Swap(ScannerContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScannerContext::InternalSwap(ScannerContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  systemtag_.Swap(&other->systemtag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entrytag_.Swap(&other->entrytag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modulation_.Swap(&other->modulation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  entryindex_.Swap(&other->entryindex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(freq_, other->freq_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScannerContext::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_context_2eproto);
  return ::file_level_metadata_context_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DemodContext::InitAsDefaultInstance() {
}
class DemodContext::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemodContext::kSquelchFieldNumber;
const int DemodContext::kGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemodContext::DemodContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:piscan_pb.DemodContext)
}
DemodContext::DemodContext(const DemodContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&squelch_, &from.squelch_,
    static_cast<size_t>(reinterpret_cast<char*>(&gain_) -
    reinterpret_cast<char*>(&squelch_)) + sizeof(gain_));
  // @@protoc_insertion_point(copy_constructor:piscan_pb.DemodContext)
}

void DemodContext::SharedCtor() {
  ::memset(&squelch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&squelch_)) + sizeof(gain_));
}

DemodContext::~DemodContext() {
  // @@protoc_insertion_point(destructor:piscan_pb.DemodContext)
  SharedDtor();
}

void DemodContext::SharedDtor() {
}

void DemodContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemodContext& DemodContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemodContext_context_2eproto.base);
  return *internal_default_instance();
}


void DemodContext::Clear() {
// @@protoc_insertion_point(message_clear_start:piscan_pb.DemodContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&squelch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gain_) -
      reinterpret_cast<char*>(&squelch_)) + sizeof(gain_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DemodContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 squelch = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        set_squelch(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float gain = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 21) goto handle_unusual;
        set_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DemodContext::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:piscan_pb.DemodContext)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 squelch = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &squelch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gain = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:piscan_pb.DemodContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:piscan_pb.DemodContext)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DemodContext::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:piscan_pb.DemodContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 squelch = 1;
  if (this->squelch() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->squelch(), output);
  }

  // float gain = 2;
  if (this->gain() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->gain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:piscan_pb.DemodContext)
}

::PROTOBUF_NAMESPACE_ID::uint8* DemodContext::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:piscan_pb.DemodContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 squelch = 1;
  if (this->squelch() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->squelch(), target);
  }

  // float gain = 2;
  if (this->gain() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->gain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:piscan_pb.DemodContext)
  return target;
}

size_t DemodContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:piscan_pb.DemodContext)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 squelch = 1;
  if (this->squelch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->squelch());
  }

  // float gain = 2;
  if (this->gain() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemodContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:piscan_pb.DemodContext)
  GOOGLE_DCHECK_NE(&from, this);
  const DemodContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DemodContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:piscan_pb.DemodContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:piscan_pb.DemodContext)
    MergeFrom(*source);
  }
}

void DemodContext::MergeFrom(const DemodContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:piscan_pb.DemodContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.squelch() != 0) {
    set_squelch(from.squelch());
  }
  if (from.gain() != 0) {
    set_gain(from.gain());
  }
}

void DemodContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:piscan_pb.DemodContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemodContext::CopyFrom(const DemodContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:piscan_pb.DemodContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemodContext::IsInitialized() const {
  return true;
}

void DemodContext::Swap(DemodContext* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemodContext::InternalSwap(DemodContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(squelch_, other->squelch_);
  swap(gain_, other->gain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DemodContext::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_context_2eproto);
  return ::file_level_metadata_context_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GeneralMessage::InitAsDefaultInstance() {
}
class GeneralMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralMessage::kTypeFieldNumber;
const int GeneralMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralMessage::GeneralMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:piscan_pb.GeneralMessage)
}
GeneralMessage::GeneralMessage(const GeneralMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:piscan_pb.GeneralMessage)
}

void GeneralMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_GeneralMessage_context_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GeneralMessage::~GeneralMessage() {
  // @@protoc_insertion_point(destructor:piscan_pb.GeneralMessage)
  SharedDtor();
}

void GeneralMessage::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeneralMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralMessage& GeneralMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralMessage_context_2eproto.base);
  return *internal_default_instance();
}


void GeneralMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:piscan_pb.GeneralMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeneralMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .piscan_pb.GeneralMessage.Type type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        set_type(static_cast<::piscan_pb::GeneralMessage_Type>(val));
        break;
      }
      // string content = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_content(), ptr, ctx, "piscan_pb.GeneralMessage.content");
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeneralMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:piscan_pb.GeneralMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .piscan_pb.GeneralMessage.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::piscan_pb::GeneralMessage_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string content = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), static_cast<int>(this->content().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "piscan_pb.GeneralMessage.content"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:piscan_pb.GeneralMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:piscan_pb.GeneralMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeneralMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:piscan_pb.GeneralMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .piscan_pb.GeneralMessage.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.GeneralMessage.content");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:piscan_pb.GeneralMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneralMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:piscan_pb.GeneralMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .piscan_pb.GeneralMessage.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), static_cast<int>(this->content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "piscan_pb.GeneralMessage.content");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:piscan_pb.GeneralMessage)
  return target;
}

size_t GeneralMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:piscan_pb.GeneralMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->content());
  }

  // .piscan_pb.GeneralMessage.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:piscan_pb.GeneralMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneralMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneralMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:piscan_pb.GeneralMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:piscan_pb.GeneralMessage)
    MergeFrom(*source);
  }
}

void GeneralMessage::MergeFrom(const GeneralMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:piscan_pb.GeneralMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GeneralMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:piscan_pb.GeneralMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralMessage::CopyFrom(const GeneralMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:piscan_pb.GeneralMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralMessage::IsInitialized() const {
  return true;
}

void GeneralMessage::Swap(GeneralMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralMessage::InternalSwap(GeneralMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneralMessage::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_context_2eproto);
  return ::file_level_metadata_context_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace piscan_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::piscan_pb::ScannerContext* Arena::CreateMaybeMessage< ::piscan_pb::ScannerContext >(Arena* arena) {
  return Arena::CreateInternal< ::piscan_pb::ScannerContext >(arena);
}
template<> PROTOBUF_NOINLINE ::piscan_pb::DemodContext* Arena::CreateMaybeMessage< ::piscan_pb::DemodContext >(Arena* arena) {
  return Arena::CreateInternal< ::piscan_pb::DemodContext >(arena);
}
template<> PROTOBUF_NOINLINE ::piscan_pb::GeneralMessage* Arena::CreateMaybeMessage< ::piscan_pb::GeneralMessage >(Arena* arena) {
  return Arena::CreateInternal< ::piscan_pb::GeneralMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
