// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_context_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemodContext_context_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_context_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralMessage_context_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_context_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScannerContext_context_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemodRequest_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralRequest_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScannerStateRequest_request_2eproto;
class ClientToServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientToServer> _instance;
} _ClientToServer_default_instance_;
class ServerToClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToClient> _instance;
} _ServerToClient_default_instance_;
static void InitDefaultsClientToServer_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientToServer_default_instance_;
    new (ptr) ::ClientToServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientToServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ClientToServer_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsClientToServer_messages_2eproto}, {
      &scc_info_GeneralRequest_request_2eproto.base,
      &scc_info_ScannerStateRequest_request_2eproto.base,
      &scc_info_DemodRequest_request_2eproto.base,}};

static void InitDefaultsServerToClient_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerToClient_default_instance_;
    new (ptr) ::ServerToClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerToClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ServerToClient_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsServerToClient_messages_2eproto}, {
      &scc_info_ScannerContext_context_2eproto.base,
      &scc_info_DemodContext_context_2eproto.base,
      &scc_info_GeneralMessage_context_2eproto.base,}};

void InitDefaults_messages_2eproto() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientToServer_messages_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToClient_messages_2eproto.base);
}

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ClientToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ClientToServer, type_),
  PROTOBUF_FIELD_OFFSET(::ClientToServer, generalrequest_),
  PROTOBUF_FIELD_OFFSET(::ClientToServer, scanstaterequest_),
  PROTOBUF_FIELD_OFFSET(::ClientToServer, demodrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ServerToClient, type_),
  PROTOBUF_FIELD_OFFSET(::ServerToClient, scannercontext_),
  PROTOBUF_FIELD_OFFSET(::ServerToClient, demodcontext_),
  PROTOBUF_FIELD_OFFSET(::ServerToClient, generalmessage_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ClientToServer)},
  { 9, -1, sizeof(::ServerToClient)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ClientToServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ServerToClient_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_messages_2eproto = {
  {}, AddDescriptors_messages_2eproto, "messages.proto", schemas,
  file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 2, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

const char descriptor_table_protodef_messages_2eproto[] =
  "\n\016messages.proto\032\rrequest.proto\032\rcontext"
  ".proto\"\375\001\n\016ClientToServer\022\"\n\004type\030\001 \001(\0162"
  "\024.ClientToServer.Type\022\'\n\016generalRequest\030"
  "\002 \001(\0132\017.GeneralRequest\022.\n\020scanStateReque"
  "st\030\003 \001(\0132\024.ScannerStateRequest\022#\n\014demodR"
  "equest\030\004 \001(\0132\r.DemodRequest\"I\n\004Type\022\023\n\017G"
  "ENERAL_REQUEST\020\000\022\031\n\025SCANNER_STATE_REQUES"
  "T\020\001\022\021\n\rDEMOD_REQUEST\020\002\"\360\001\n\016ServerToClien"
  "t\022\"\n\004type\030\001 \001(\0162\024.ServerToClient.Type\022\'\n"
  "\016scannerContext\030\002 \001(\0132\017.ScannerContext\022#"
  "\n\014demodContext\030\003 \001(\0132\r.DemodContext\022\'\n\016g"
  "eneralMessage\030\004 \001(\0132\017.GeneralMessage\"C\n\004"
  "Type\022\023\n\017SCANNER_CONTEXT\020\000\022\021\n\rDEMOD_CONTE"
  "XT\020\001\022\023\n\017GENERAL_MESSAGE\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  false, InitDefaults_messages_2eproto, 
  descriptor_table_protodef_messages_2eproto,
  "messages.proto", &assign_descriptors_table_messages_2eproto, 553,
};

void AddDescriptors_messages_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_request_2eproto,
    ::AddDescriptors_context_2eproto,
  };
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = []() { AddDescriptors_messages_2eproto(); return true; }();
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientToServer_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool ClientToServer_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientToServer_Type ClientToServer::GENERAL_REQUEST;
constexpr ClientToServer_Type ClientToServer::SCANNER_STATE_REQUEST;
constexpr ClientToServer_Type ClientToServer::DEMOD_REQUEST;
constexpr ClientToServer_Type ClientToServer::Type_MIN;
constexpr ClientToServer_Type ClientToServer::Type_MAX;
constexpr int ClientToServer::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerToClient_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool ServerToClient_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ServerToClient_Type ServerToClient::SCANNER_CONTEXT;
constexpr ServerToClient_Type ServerToClient::DEMOD_CONTEXT;
constexpr ServerToClient_Type ServerToClient::GENERAL_MESSAGE;
constexpr ServerToClient_Type ServerToClient::Type_MIN;
constexpr ServerToClient_Type ServerToClient::Type_MAX;
constexpr int ServerToClient::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientToServer::InitAsDefaultInstance() {
  ::_ClientToServer_default_instance_._instance.get_mutable()->generalrequest_ = const_cast< ::GeneralRequest*>(
      ::GeneralRequest::internal_default_instance());
  ::_ClientToServer_default_instance_._instance.get_mutable()->scanstaterequest_ = const_cast< ::ScannerStateRequest*>(
      ::ScannerStateRequest::internal_default_instance());
  ::_ClientToServer_default_instance_._instance.get_mutable()->demodrequest_ = const_cast< ::DemodRequest*>(
      ::DemodRequest::internal_default_instance());
}
class ClientToServer::HasBitSetters {
 public:
  static const ::GeneralRequest& generalrequest(const ClientToServer* msg);
  static const ::ScannerStateRequest& scanstaterequest(const ClientToServer* msg);
  static const ::DemodRequest& demodrequest(const ClientToServer* msg);
};

const ::GeneralRequest&
ClientToServer::HasBitSetters::generalrequest(const ClientToServer* msg) {
  return *msg->generalrequest_;
}
const ::ScannerStateRequest&
ClientToServer::HasBitSetters::scanstaterequest(const ClientToServer* msg) {
  return *msg->scanstaterequest_;
}
const ::DemodRequest&
ClientToServer::HasBitSetters::demodrequest(const ClientToServer* msg) {
  return *msg->demodrequest_;
}
void ClientToServer::clear_generalrequest() {
  if (GetArenaNoVirtual() == nullptr && generalrequest_ != nullptr) {
    delete generalrequest_;
  }
  generalrequest_ = nullptr;
}
void ClientToServer::clear_scanstaterequest() {
  if (GetArenaNoVirtual() == nullptr && scanstaterequest_ != nullptr) {
    delete scanstaterequest_;
  }
  scanstaterequest_ = nullptr;
}
void ClientToServer::clear_demodrequest() {
  if (GetArenaNoVirtual() == nullptr && demodrequest_ != nullptr) {
    delete demodrequest_;
  }
  demodrequest_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToServer::kTypeFieldNumber;
const int ClientToServer::kGeneralRequestFieldNumber;
const int ClientToServer::kScanStateRequestFieldNumber;
const int ClientToServer::kDemodRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToServer::ClientToServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientToServer)
}
ClientToServer::ClientToServer(const ClientToServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_generalrequest()) {
    generalrequest_ = new ::GeneralRequest(*from.generalrequest_);
  } else {
    generalrequest_ = nullptr;
  }
  if (from.has_scanstaterequest()) {
    scanstaterequest_ = new ::ScannerStateRequest(*from.scanstaterequest_);
  } else {
    scanstaterequest_ = nullptr;
  }
  if (from.has_demodrequest()) {
    demodrequest_ = new ::DemodRequest(*from.demodrequest_);
  } else {
    demodrequest_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ClientToServer)
}

void ClientToServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ClientToServer_messages_2eproto.base);
  ::memset(&generalrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&generalrequest_)) + sizeof(type_));
}

ClientToServer::~ClientToServer() {
  // @@protoc_insertion_point(destructor:ClientToServer)
  SharedDtor();
}

void ClientToServer::SharedDtor() {
  if (this != internal_default_instance()) delete generalrequest_;
  if (this != internal_default_instance()) delete scanstaterequest_;
  if (this != internal_default_instance()) delete demodrequest_;
}

void ClientToServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientToServer& ClientToServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientToServer_messages_2eproto.base);
  return *internal_default_instance();
}


void ClientToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && generalrequest_ != nullptr) {
    delete generalrequest_;
  }
  generalrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && scanstaterequest_ != nullptr) {
    delete scanstaterequest_;
  }
  scanstaterequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && demodrequest_ != nullptr) {
    delete demodrequest_;
  }
  demodrequest_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientToServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ClientToServer.Type type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        set_type(static_cast<::ClientToServer_Type>(val));
        break;
      }
      // .GeneralRequest generalRequest = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_generalrequest(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .ScannerStateRequest scanStateRequest = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_scanstaterequest(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .DemodRequest demodRequest = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_demodrequest(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientToServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientToServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ClientToServer.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ClientToServer_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GeneralRequest generalRequest = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generalrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ScannerStateRequest scanStateRequest = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scanstaterequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DemodRequest demodRequest = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_demodrequest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientToServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientToServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientToServer.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .GeneralRequest generalRequest = 2;
  if (this->has_generalrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::generalrequest(this), output);
  }

  // .ScannerStateRequest scanStateRequest = 3;
  if (this->has_scanstaterequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::scanstaterequest(this), output);
  }

  // .DemodRequest demodRequest = 4;
  if (this->has_demodrequest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::demodrequest(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientToServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientToServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientToServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ClientToServer.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .GeneralRequest generalRequest = 2;
  if (this->has_generalrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::generalrequest(this), target);
  }

  // .ScannerStateRequest scanStateRequest = 3;
  if (this->has_scanstaterequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::scanstaterequest(this), target);
  }

  // .DemodRequest demodRequest = 4;
  if (this->has_demodrequest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::demodrequest(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientToServer)
  return target;
}

size_t ClientToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientToServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GeneralRequest generalRequest = 2;
  if (this->has_generalrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generalrequest_);
  }

  // .ScannerStateRequest scanStateRequest = 3;
  if (this->has_scanstaterequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scanstaterequest_);
  }

  // .DemodRequest demodRequest = 4;
  if (this->has_demodrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *demodrequest_);
  }

  // .ClientToServer.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientToServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientToServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientToServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientToServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientToServer)
    MergeFrom(*source);
  }
}

void ClientToServer::MergeFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_generalrequest()) {
    mutable_generalrequest()->::GeneralRequest::MergeFrom(from.generalrequest());
  }
  if (from.has_scanstaterequest()) {
    mutable_scanstaterequest()->::ScannerStateRequest::MergeFrom(from.scanstaterequest());
  }
  if (from.has_demodrequest()) {
    mutable_demodrequest()->::DemodRequest::MergeFrom(from.demodrequest());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ClientToServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToServer::IsInitialized() const {
  return true;
}

void ClientToServer::Swap(ClientToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToServer::InternalSwap(ClientToServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(generalrequest_, other->generalrequest_);
  swap(scanstaterequest_, other->scanstaterequest_);
  swap(demodrequest_, other->demodrequest_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientToServer::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ServerToClient::InitAsDefaultInstance() {
  ::_ServerToClient_default_instance_._instance.get_mutable()->scannercontext_ = const_cast< ::ScannerContext*>(
      ::ScannerContext::internal_default_instance());
  ::_ServerToClient_default_instance_._instance.get_mutable()->demodcontext_ = const_cast< ::DemodContext*>(
      ::DemodContext::internal_default_instance());
  ::_ServerToClient_default_instance_._instance.get_mutable()->generalmessage_ = const_cast< ::GeneralMessage*>(
      ::GeneralMessage::internal_default_instance());
}
class ServerToClient::HasBitSetters {
 public:
  static const ::ScannerContext& scannercontext(const ServerToClient* msg);
  static const ::DemodContext& demodcontext(const ServerToClient* msg);
  static const ::GeneralMessage& generalmessage(const ServerToClient* msg);
};

const ::ScannerContext&
ServerToClient::HasBitSetters::scannercontext(const ServerToClient* msg) {
  return *msg->scannercontext_;
}
const ::DemodContext&
ServerToClient::HasBitSetters::demodcontext(const ServerToClient* msg) {
  return *msg->demodcontext_;
}
const ::GeneralMessage&
ServerToClient::HasBitSetters::generalmessage(const ServerToClient* msg) {
  return *msg->generalmessage_;
}
void ServerToClient::clear_scannercontext() {
  if (GetArenaNoVirtual() == nullptr && scannercontext_ != nullptr) {
    delete scannercontext_;
  }
  scannercontext_ = nullptr;
}
void ServerToClient::clear_demodcontext() {
  if (GetArenaNoVirtual() == nullptr && demodcontext_ != nullptr) {
    delete demodcontext_;
  }
  demodcontext_ = nullptr;
}
void ServerToClient::clear_generalmessage() {
  if (GetArenaNoVirtual() == nullptr && generalmessage_ != nullptr) {
    delete generalmessage_;
  }
  generalmessage_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerToClient::kTypeFieldNumber;
const int ServerToClient::kScannerContextFieldNumber;
const int ServerToClient::kDemodContextFieldNumber;
const int ServerToClient::kGeneralMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerToClient::ServerToClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerToClient)
}
ServerToClient::ServerToClient(const ServerToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_scannercontext()) {
    scannercontext_ = new ::ScannerContext(*from.scannercontext_);
  } else {
    scannercontext_ = nullptr;
  }
  if (from.has_demodcontext()) {
    demodcontext_ = new ::DemodContext(*from.demodcontext_);
  } else {
    demodcontext_ = nullptr;
  }
  if (from.has_generalmessage()) {
    generalmessage_ = new ::GeneralMessage(*from.generalmessage_);
  } else {
    generalmessage_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:ServerToClient)
}

void ServerToClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ServerToClient_messages_2eproto.base);
  ::memset(&scannercontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&scannercontext_)) + sizeof(type_));
}

ServerToClient::~ServerToClient() {
  // @@protoc_insertion_point(destructor:ServerToClient)
  SharedDtor();
}

void ServerToClient::SharedDtor() {
  if (this != internal_default_instance()) delete scannercontext_;
  if (this != internal_default_instance()) delete demodcontext_;
  if (this != internal_default_instance()) delete generalmessage_;
}

void ServerToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToClient& ServerToClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToClient_messages_2eproto.base);
  return *internal_default_instance();
}


void ServerToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && scannercontext_ != nullptr) {
    delete scannercontext_;
  }
  scannercontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && demodcontext_ != nullptr) {
    delete demodcontext_;
  }
  demodcontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && generalmessage_ != nullptr) {
    delete generalmessage_;
  }
  generalmessage_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .ServerToClient.Type type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        set_type(static_cast<::ServerToClient_Type>(val));
        break;
      }
      // .ScannerContext scannerContext = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_scannercontext(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .DemodContext demodContext = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_demodcontext(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .GeneralMessage generalMessage = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_generalmessage(), ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerToClient::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerToClient)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ServerToClient.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ServerToClient_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ScannerContext scannerContext = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scannercontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DemodContext demodContext = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_demodcontext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GeneralMessage generalMessage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generalmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerToClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerToClient::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerToClient.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .ScannerContext scannerContext = 2;
  if (this->has_scannercontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::scannercontext(this), output);
  }

  // .DemodContext demodContext = 3;
  if (this->has_demodcontext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::demodcontext(this), output);
  }

  // .GeneralMessage generalMessage = 4;
  if (this->has_generalmessage()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::generalmessage(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerToClient)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToClient::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerToClient.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .ScannerContext scannerContext = 2;
  if (this->has_scannercontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::scannercontext(this), target);
  }

  // .DemodContext demodContext = 3;
  if (this->has_demodcontext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::demodcontext(this), target);
  }

  // .GeneralMessage generalMessage = 4;
  if (this->has_generalmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::generalmessage(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerToClient)
  return target;
}

size_t ServerToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ScannerContext scannerContext = 2;
  if (this->has_scannercontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scannercontext_);
  }

  // .DemodContext demodContext = 3;
  if (this->has_demodcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *demodcontext_);
  }

  // .GeneralMessage generalMessage = 4;
  if (this->has_generalmessage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *generalmessage_);
  }

  // .ServerToClient.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerToClient)
    MergeFrom(*source);
  }
}

void ServerToClient::MergeFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_scannercontext()) {
    mutable_scannercontext()->::ScannerContext::MergeFrom(from.scannercontext());
  }
  if (from.has_demodcontext()) {
    mutable_demodcontext()->::DemodContext::MergeFrom(from.demodcontext());
  }
  if (from.has_generalmessage()) {
    mutable_generalmessage()->::GeneralMessage::MergeFrom(from.generalmessage());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ServerToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToClient::IsInitialized() const {
  return true;
}

void ServerToClient::Swap(ServerToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerToClient::InternalSwap(ServerToClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(scannercontext_, other->scannercontext_);
  swap(demodcontext_, other->demodcontext_);
  swap(generalmessage_, other->generalmessage_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToClient::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_messages_2eproto);
  return ::file_level_metadata_messages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ClientToServer* Arena::CreateMaybeMessage< ::ClientToServer >(Arena* arena) {
  return Arena::CreateInternal< ::ClientToServer >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerToClient* Arena::CreateMaybeMessage< ::ServerToClient >(Arena* arena) {
  return Arena::CreateInternal< ::ServerToClient >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
